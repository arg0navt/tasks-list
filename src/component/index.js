import moment from "moment";import React from "react";import PropTypes from 'prop-types';import User from "./user";import TimeLine from "./TimeLine";export const MAX_DURATION = 86400;export const ONE_PROCENT = 864;export default class TasksList extends React.Component {  constructor(props){    super(props);    this.state = {      tasks: props.tasks    }  }  getChildContext() {    return {      convertSecondToWidth: this.convertSecondToWidth,      convertTimeFormat: this.convertTimeFormat,      changeTaskPosition: this.changeTaskPosition    }  }  _renderMeasure = () => {    for (var i = -1, result = []; i <= 47; i++) {      if (i < 0) {        result.push("00:00")      } else if (i === 47) {        result.push("")      } else result.push(`${i / 2 < 9 ? '0' + (i / 2).toFixed() : (i / 2).toFixed()}:${!(i % 2) ? 30 : '00'}`)    }    return result.map((item) => <div key={item} className="time-measure__item"><p>{item}</p></div>)  };  _renderLine = () => this.state.tasks.map((task) => <TimeLine key={task.id} timeSlices={task.timeLine} id={task.id}/>);  _renderUserName = () => this.state.tasks.map((task) => <User key={task.id} name={task.name}/>);  convertSecondToWidth = (time) => (time / MAX_DURATION) * 100;  convertTimeFormat = (time) => moment.duration(time);  changeTaskPosition = (range, id, index) => {    const duration = Math.trunc(ONE_PROCENT * range);    this.setState(prevState => {      const findLine = prevState.tasks.find((line) => line.id === id);      if(findLine && findLine.timeLine && findLine.timeLine[index]) {        if (findLine.timeLine[index].prevPosition) {          findLine.timeLine[index].start = findLine.timeLine[index].prevPosition.start + duration;          findLine.timeLine[index].end = findLine.timeLine[index].prevPosition.end + duration;        } else {          findLine.timeLine[index].prevPosition = {            start: findLine.timeLine[index].start,            end: findLine.timeLine[index].end          }          findLine.timeLine[index].start = findLine.timeLine[index].prevPosition.start + duration;          findLine.timeLine[index].end = findLine.timeLine[index].prevPosition.end + duration;        }      }      return prevState;    });  }  render() {    return (      <div className="taskList">        <div className="taskList__users">          {this._renderUserName()}        </div>        <div className="taskList__usersTime">          {this._renderLine()}          <div className="time-measure">            {this._renderMeasure()}          </div>        </div>      </div>    )  }}TasksList.childContextTypes = {  convertSecondToWidth: PropTypes.func,  convertTimeFormat: PropTypes.func,  changeTaskPosition: PropTypes.func};